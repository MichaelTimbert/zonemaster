#!/usr/bin/env perl

use strict;
use warnings;

use Pod::Usage;
use Getopt::Long;
use File::Basename;

# command line options
my $dirloc = '.'; # directory for serching test cases
my $help;
my $DEBUG = 0;

# global variables
my $tcCounter = 0;

sub main {
    GetOptions(
        'help|?'  => \$help,
        'dir|d=s' => \$dirloc,
        'debug'   => \$DEBUG,
    ) or pod2usage(2);

    if ($help) {
        pod2usage(1);
        exit;
    }
    opendir(my $dir, $dirloc) || die "cannot open directory $dirloc";

    my @files = readdir $dir;
    @files = sort {$a cmp $b} @files;
    foreach my $f (@files) {
        print "$dirloc/$f\n" if $DEBUG;
        next if $f =~ /^\./;

        if ( -d "$dirloc/$f" and "$f" =~ /-TP/ ) {
            tcList( "$dirloc/$f" );
        }
    }
    print "No test cases found\nUse -d to specify directory\n" if !$tcCounter;
}

sub tcList
{
    my $tcDir = shift;

    my $output = "## Test cases list\n\n";
    $output .= "<!-- Table generated by script " . basename ($0) . " from Zonemaster/Zonemaster utils directory -->\n\n";
    $output .= '|Test Case |Test Case Description|' . "\n";
    $output .= '|:---------|:--------------------|' . "\n";

    opendir(my $dir, $tcDir);
    my @files = readdir $dir;
    @files = sort {$a cmp $b} @files;
    foreach my $f (@files) {
        next if $f =~ /^\./;
        next if $f eq "README.md";
        unless ($f =~ /^[a-z]+[0-9]+\.md$/) {
            warn "Skip file with unknown file name pattern: $f\n";
            next;
        }
        $output .= tcName("$tcDir/$f");
    }

    if ( ! grep( /^README\.md$/, @files ) ) {
        warn "No README.md file in folder $tcDir\n";
        return;
    }

    writeReadme( "$tcDir/README.md", $output );
}

sub writeReadme
{
    my ( $tcPath, $tcTable ) = @_;

    # slurp README content until pattern
    my $content = "";
    open( my $in, '<', $tcPath ) or die "Cannot open file $tcPath: $!";
    while( <$in> ) {
        last if $_ =~ /^## Test cases list$/;
        $content .= $_;
    }
    close $in;

    $content .= $tcTable;

    open( my $file, '>', $tcPath ) or die "Cannot open file $tcPath: $!";
    print $file $content;
    close $file;
}

sub tcName
{
    my $tcPath   = shift;
    my $basename = basename($tcPath);
    my $testcase = uc (basename($tcPath, ".md"));

    my $output = "";

    open my $file, $tcPath or die "Cannot open file $tcPath: $!";
    my $header = <$file>;
    if (defined $header) {
        if ($header =~ /^#+ +([A-Z]+[0-9]+): +(.*)/) {

            # For each test case
            $output .= "|[$testcase]($basename)|$2|\n";

            warn "$tcPath: Test case ID does not match on first line\n" unless $1 eq $testcase;
        } else {
            warn "$tcPath: mismatch on first line\n";
        };
    } else {
        warn "$tcPath: empty file or empty first line\n";
    }
    $tcCounter++; # increase the global counter
    close $file;

    return $output;
}

main();

=head1 NAME

    updateTestPlanReadme

=head1 DESCRIPTION

This tools updates all TestPlans README files with the TestPlan's test cases.

=head1 USAGE

updateTestPlanReadme.pl --dir .

Optional arguments:

  --dir      Directory path of the test case directory
  --help     This help text

=cut
